type _Schema_
  @fulltext(
    name: "tokenSearch",
    language: en,
    algorithm: rank,
    include: [
      {
        entity: "RelayerToken",
        fields: [
          { name: "keyword"}
        ]
      }
    ]
  )

type RelayerToken @entity {
  id: ID!
  tokenId: BigInt!
  keyword: String!
  isVerified: Boolean!
  contract: String
  owner: String!
  officialLink: String
  profilePic: String
  relayerTokenSupply: Int!
  receiverTokenSupply: Int!
  userTokenBalances: [UserTokenBalance!] @derivedFrom(field: "tokenId")
  messages: [Message!] @derivedFrom(field: "tokenId")
}

type User @entity {
  id: ID!
  userTokenBalances: [UserTokenBalance!] @derivedFrom(field: "user")
  messages: [Message!] @derivedFrom(field: "from")
  replies: [Reply!] @derivedFrom(field: "from")
}

type UserTokenBalance @entity {
  id: ID! # Set to `${user.id}-${relayerToken.id}`
  user: User!
  tokenId: RelayerToken!
  relayerTokenBalance: BigInt!
  receiverTokenBalance: BigInt!
}

type Message @entity {
  id: ID! # Set to ${userId}-${tokenId}-${timestamp}
  from: User!
  tokenId: RelayerToken!
  timestamp: String!
  sourceChain: String
  txHash: String
  content: String!
  replies: [Reply!] @derivedFrom(field: "belongsTo")
}

type Reply @entity {
  id: ID! # Set to `${userId}-${messageId}-${timestamp}`
  from: User!
  timestamp: String!
  sourceChain: String
  txHash: String
  content: String!
  belongsTo: Message!
}
