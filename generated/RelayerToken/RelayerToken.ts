// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class RelayerBatchTransfer extends ethereum.Event {
  get params(): RelayerBatchTransfer__Params {
    return new RelayerBatchTransfer__Params(this);
  }
}

export class RelayerBatchTransfer__Params {
  _event: RelayerBatchTransfer;

  constructor(event: RelayerBatchTransfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get ids(): Array<BigInt> {
    return this._event.parameters[2].value.toBigIntArray();
  }

  get amounts(): Array<BigInt> {
    return this._event.parameters[3].value.toBigIntArray();
  }

  get timestamp(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class RelayerBurn extends ethereum.Event {
  get params(): RelayerBurn__Params {
    return new RelayerBurn__Params(this);
  }
}

export class RelayerBurn__Params {
  _event: RelayerBurn;

  constructor(event: RelayerBurn) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get timestamp(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class RelayerInitialMint extends ethereum.Event {
  get params(): RelayerInitialMint__Params {
    return new RelayerInitialMint__Params(this);
  }
}

export class RelayerInitialMint__Params {
  _event: RelayerInitialMint;

  constructor(event: RelayerInitialMint) {
    this._event = event;
  }

  get to(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get keyword(): string {
    return this._event.parameters[3].value.toString();
  }

  get _contract(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get timestamp(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class RelayerMint extends ethereum.Event {
  get params(): RelayerMint__Params {
    return new RelayerMint__Params(this);
  }
}

export class RelayerMint__Params {
  _event: RelayerMint;

  constructor(event: RelayerMint) {
    this._event = event;
  }

  get to(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get timestamp(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class RelayerTransfer extends ethereum.Event {
  get params(): RelayerTransfer__Params {
    return new RelayerTransfer__Params(this);
  }
}

export class RelayerTransfer__Params {
  _event: RelayerTransfer;

  constructor(event: RelayerTransfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get id(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get timestamp(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class TransferBatch extends ethereum.Event {
  get params(): TransferBatch__Params {
    return new TransferBatch__Params(this);
  }
}

export class TransferBatch__Params {
  _event: TransferBatch;

  constructor(event: TransferBatch) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get ids(): Array<BigInt> {
    return this._event.parameters[3].value.toBigIntArray();
  }

  get values(): Array<BigInt> {
    return this._event.parameters[4].value.toBigIntArray();
  }
}

export class TransferSingle extends ethereum.Event {
  get params(): TransferSingle__Params {
    return new TransferSingle__Params(this);
  }
}

export class TransferSingle__Params {
  _event: TransferSingle;

  constructor(event: TransferSingle) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get id(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get value(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class URI extends ethereum.Event {
  get params(): URI__Params {
    return new URI__Params(this);
  }
}

export class URI__Params {
  _event: URI;

  constructor(event: URI) {
    this._event = event;
  }

  get value(): string {
    return this._event.parameters[0].value.toString();
  }

  get id(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class UpdateTokenLink extends ethereum.Event {
  get params(): UpdateTokenLink__Params {
    return new UpdateTokenLink__Params(this);
  }
}

export class UpdateTokenLink__Params {
  _event: UpdateTokenLink;

  constructor(event: UpdateTokenLink) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get officialLink(): string {
    return this._event.parameters[1].value.toString();
  }
}

export class UpdateTokenOwner extends ethereum.Event {
  get params(): UpdateTokenOwner__Params {
    return new UpdateTokenOwner__Params(this);
  }
}

export class UpdateTokenOwner__Params {
  _event: UpdateTokenOwner;

  constructor(event: UpdateTokenOwner) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class UpdateTokenProfilePic extends ethereum.Event {
  get params(): UpdateTokenProfilePic__Params {
    return new UpdateTokenProfilePic__Params(this);
  }
}

export class UpdateTokenProfilePic__Params {
  _event: UpdateTokenProfilePic;

  constructor(event: UpdateTokenProfilePic) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get profilePic(): string {
    return this._event.parameters[1].value.toString();
  }
}

export class RelayerToken__tokensResult {
  value0: BigInt;
  value1: string;
  value2: Address;
  value3: Address;
  value4: string;
  value5: string;

  constructor(
    value0: BigInt,
    value1: string,
    value2: Address,
    value3: Address,
    value4: string,
    value5: string
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromString(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    map.set("value3", ethereum.Value.fromAddress(this.value3));
    map.set("value4", ethereum.Value.fromString(this.value4));
    map.set("value5", ethereum.Value.fromString(this.value5));
    return map;
  }

  get_supply(): BigInt {
    return this.value0;
  }

  get_keyword(): string {
    return this.value1;
  }

  get_contract(): Address {
    return this.value2;
  }

  get_verifiedOwner(): Address {
    return this.value3;
  }

  get_profilePic(): string {
    return this.value4;
  }

  get_officialLink(): string {
    return this.value5;
  }
}

export class RelayerToken extends ethereum.SmartContract {
  static bind(address: Address): RelayerToken {
    return new RelayerToken("RelayerToken", address);
  }

  balanceOf(account: Address, id: BigInt): BigInt {
    let result = super.call(
      "balanceOf",
      "balanceOf(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(id)
      ]
    );

    return result[0].toBigInt();
  }

  try_balanceOf(account: Address, id: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceOf",
      "balanceOf(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(id)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOfBatch(accounts: Array<Address>, ids: Array<BigInt>): Array<BigInt> {
    let result = super.call(
      "balanceOfBatch",
      "balanceOfBatch(address[],uint256[]):(uint256[])",
      [
        ethereum.Value.fromAddressArray(accounts),
        ethereum.Value.fromUnsignedBigIntArray(ids)
      ]
    );

    return result[0].toBigIntArray();
  }

  try_balanceOfBatch(
    accounts: Array<Address>,
    ids: Array<BigInt>
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "balanceOfBatch",
      "balanceOfBatch(address[],uint256[]):(uint256[])",
      [
        ethereum.Value.fromAddressArray(accounts),
        ethereum.Value.fromUnsignedBigIntArray(ids)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  exists(param0: BigInt): boolean {
    let result = super.call("exists", "exists(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBoolean();
  }

  try_exists(param0: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("exists", "exists(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getUri(param0: BigInt): string {
    let result = super.call("getUri", "getUri(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toString();
  }

  try_getUri(param0: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("getUri", "getUri(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  isApprovedForAll(account: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromAddress(operator)
      ]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    account: Address,
    operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromAddress(operator)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokens(param0: BigInt): RelayerToken__tokensResult {
    let result = super.call(
      "tokens",
      "tokens(uint256):(uint256,string,address,address,string,string)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new RelayerToken__tokensResult(
      result[0].toBigInt(),
      result[1].toString(),
      result[2].toAddress(),
      result[3].toAddress(),
      result[4].toString(),
      result[5].toString()
    );
  }

  try_tokens(param0: BigInt): ethereum.CallResult<RelayerToken__tokensResult> {
    let result = super.tryCall(
      "tokens",
      "tokens(uint256):(uint256,string,address,address,string,string)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new RelayerToken__tokensResult(
        value[0].toBigInt(),
        value[1].toString(),
        value[2].toAddress(),
        value[3].toAddress(),
        value[4].toString(),
        value[5].toString()
      )
    );
  }

  uri(param0: BigInt): string {
    let result = super.call("uri", "uri(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toString();
  }

  try_uri(param0: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("uri", "uri(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _symbol(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _uri(): string {
    return this._call.inputValues[2].value.toString();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class BurnCall extends ethereum.Call {
  get inputs(): BurnCall__Inputs {
    return new BurnCall__Inputs(this);
  }

  get outputs(): BurnCall__Outputs {
    return new BurnCall__Outputs(this);
  }
}

export class BurnCall__Inputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }

  get _from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class BurnCall__Outputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }
}

export class InitialMintCall extends ethereum.Call {
  get inputs(): InitialMintCall__Inputs {
    return new InitialMintCall__Inputs(this);
  }

  get outputs(): InitialMintCall__Outputs {
    return new InitialMintCall__Outputs(this);
  }
}

export class InitialMintCall__Inputs {
  _call: InitialMintCall;

  constructor(call: InitialMintCall) {
    this._call = call;
  }

  get _contract(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _keyword(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class InitialMintCall__Outputs {
  _call: InitialMintCall;

  constructor(call: InitialMintCall) {
    this._call = call;
  }
}

export class MintRelayerCall extends ethereum.Call {
  get inputs(): MintRelayerCall__Inputs {
    return new MintRelayerCall__Inputs(this);
  }

  get outputs(): MintRelayerCall__Outputs {
    return new MintRelayerCall__Outputs(this);
  }
}

export class MintRelayerCall__Inputs {
  _call: MintRelayerCall;

  constructor(call: MintRelayerCall) {
    this._call = call;
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class MintRelayerCall__Outputs {
  _call: MintRelayerCall;

  constructor(call: MintRelayerCall) {
    this._call = call;
  }
}

export class OwnerInitialMintCall extends ethereum.Call {
  get inputs(): OwnerInitialMintCall__Inputs {
    return new OwnerInitialMintCall__Inputs(this);
  }

  get outputs(): OwnerInitialMintCall__Outputs {
    return new OwnerInitialMintCall__Outputs(this);
  }
}

export class OwnerInitialMintCall__Inputs {
  _call: OwnerInitialMintCall;

  constructor(call: OwnerInitialMintCall) {
    this._call = call;
  }

  get _contract(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _keyword(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class OwnerInitialMintCall__Outputs {
  _call: OwnerInitialMintCall;

  constructor(call: OwnerInitialMintCall) {
    this._call = call;
  }
}

export class OwnerMintCall extends ethereum.Call {
  get inputs(): OwnerMintCall__Inputs {
    return new OwnerMintCall__Inputs(this);
  }

  get outputs(): OwnerMintCall__Outputs {
    return new OwnerMintCall__Outputs(this);
  }
}

export class OwnerMintCall__Inputs {
  _call: OwnerMintCall;

  constructor(call: OwnerMintCall) {
    this._call = call;
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class OwnerMintCall__Outputs {
  _call: OwnerMintCall;

  constructor(call: OwnerMintCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SafeBatchTransferFromCall extends ethereum.Call {
  get inputs(): SafeBatchTransferFromCall__Inputs {
    return new SafeBatchTransferFromCall__Inputs(this);
  }

  get outputs(): SafeBatchTransferFromCall__Outputs {
    return new SafeBatchTransferFromCall__Outputs(this);
  }
}

export class SafeBatchTransferFromCall__Inputs {
  _call: SafeBatchTransferFromCall;

  constructor(call: SafeBatchTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get ids(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get amounts(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get data(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class SafeBatchTransferFromCall__Outputs {
  _call: SafeBatchTransferFromCall;

  constructor(call: SafeBatchTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get id(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class SetReceiverContractAddressCall extends ethereum.Call {
  get inputs(): SetReceiverContractAddressCall__Inputs {
    return new SetReceiverContractAddressCall__Inputs(this);
  }

  get outputs(): SetReceiverContractAddressCall__Outputs {
    return new SetReceiverContractAddressCall__Outputs(this);
  }
}

export class SetReceiverContractAddressCall__Inputs {
  _call: SetReceiverContractAddressCall;

  constructor(call: SetReceiverContractAddressCall) {
    this._call = call;
  }

  get _address(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetReceiverContractAddressCall__Outputs {
  _call: SetReceiverContractAddressCall;

  constructor(call: SetReceiverContractAddressCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UpdateTokenLinkCall extends ethereum.Call {
  get inputs(): UpdateTokenLinkCall__Inputs {
    return new UpdateTokenLinkCall__Inputs(this);
  }

  get outputs(): UpdateTokenLinkCall__Outputs {
    return new UpdateTokenLinkCall__Outputs(this);
  }
}

export class UpdateTokenLinkCall__Inputs {
  _call: UpdateTokenLinkCall;

  constructor(call: UpdateTokenLinkCall) {
    this._call = call;
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _officialLink(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class UpdateTokenLinkCall__Outputs {
  _call: UpdateTokenLinkCall;

  constructor(call: UpdateTokenLinkCall) {
    this._call = call;
  }
}

export class UpdateTokenOwnerCall extends ethereum.Call {
  get inputs(): UpdateTokenOwnerCall__Inputs {
    return new UpdateTokenOwnerCall__Inputs(this);
  }

  get outputs(): UpdateTokenOwnerCall__Outputs {
    return new UpdateTokenOwnerCall__Outputs(this);
  }
}

export class UpdateTokenOwnerCall__Inputs {
  _call: UpdateTokenOwnerCall;

  constructor(call: UpdateTokenOwnerCall) {
    this._call = call;
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _newOwner(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class UpdateTokenOwnerCall__Outputs {
  _call: UpdateTokenOwnerCall;

  constructor(call: UpdateTokenOwnerCall) {
    this._call = call;
  }
}

export class UpdateTokenProfilePicCall extends ethereum.Call {
  get inputs(): UpdateTokenProfilePicCall__Inputs {
    return new UpdateTokenProfilePicCall__Inputs(this);
  }

  get outputs(): UpdateTokenProfilePicCall__Outputs {
    return new UpdateTokenProfilePicCall__Outputs(this);
  }
}

export class UpdateTokenProfilePicCall__Inputs {
  _call: UpdateTokenProfilePicCall;

  constructor(call: UpdateTokenProfilePicCall) {
    this._call = call;
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _profilePic(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class UpdateTokenProfilePicCall__Outputs {
  _call: UpdateTokenProfilePicCall;

  constructor(call: UpdateTokenProfilePicCall) {
    this._call = call;
  }
}
